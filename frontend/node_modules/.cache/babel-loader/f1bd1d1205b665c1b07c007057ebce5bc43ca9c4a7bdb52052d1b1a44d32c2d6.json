{"ast":null,"code":"var _jsxFileName = \"A:\\\\Aryan Drive D\\\\Projects\\\\Single Sign-on Service\\\\sso_app\\\\frontend\\\\src\\\\components\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst API_URL = \"http://127.0.0.1:8000/api\";\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(null);\n\n  // Load user from localStorage on mount\n  useEffect(() => {\n    const savedToken = localStorage.getItem(\"access_token\");\n    const savedUser = localStorage.getItem(\"user\");\n    if (savedToken && savedUser) {\n      setToken(savedToken);\n      setUser(JSON.parse(savedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  // Refresh access token using refresh token\n  const refreshAccessToken = async () => {\n    const refreshToken = localStorage.getItem(\"refresh_token\");\n    if (!refreshToken) return false;\n    try {\n      const response = await fetch(`${API_URL}/auth/refresh`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          refresh_token: refreshToken\n        })\n      });\n      if (!response.ok) {\n        // Refresh token expired, logout\n        logout();\n        return false;\n      }\n      const data = await response.json();\n      localStorage.setItem(\"access_token\", data.access_token);\n      setToken(data.access_token);\n      return true;\n    } catch (error) {\n      console.error(\"Token refresh error:\", error);\n      logout();\n      return false;\n    }\n  };\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(`${API_URL}/auth/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.detail || \"Login failed\"\n        };\n      }\n      const data = await response.json();\n\n      // Save BOTH access token and refresh token\n      localStorage.setItem(\"access_token\", data.access_token);\n      localStorage.setItem(\"refresh_token\", data.refresh_token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      setToken(data.access_token);\n      setUser(data.user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return {\n        success: false,\n        message: \"Network error. Please try again.\"\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      const response = await fetch(`${API_URL}/auth/register`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.detail || \"Registration failed\"\n        };\n      }\n      const data = await response.json();\n\n      // Save BOTH access token and refresh token\n      localStorage.setItem(\"access_token\", data.access_token);\n      localStorage.setItem(\"refresh_token\", data.refresh_token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      setToken(data.access_token);\n      setUser(data.user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Register error:\", error);\n      return {\n        success: false,\n        message: \"Network error. Please try again.\"\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      if (token) {\n        await fetch(`${API_URL}/auth/logout`, {\n          method: \"POST\",\n          headers: {\n            \"Authorization\": `Bearer ${token}`\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    } finally {\n      // Clear ALL stored data including refresh token\n      localStorage.removeItem(\"access_token\");\n      localStorage.removeItem(\"refresh_token\");\n      localStorage.removeItem(\"user\");\n      setToken(null);\n      setUser(null);\n    }\n  };\n\n  // Update profile function\n  const updateProfile = async updatedData => {\n    try {\n      const response = await fetch(`${API_URL}/profile`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token}`\n        },\n        body: JSON.stringify(updatedData)\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.detail || \"Update failed\"\n        };\n      }\n\n      // Update local user data\n      const updatedUser = {\n        ...user,\n        ...updatedData\n      };\n      setUser(updatedUser);\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      return {\n        success: false,\n        message: \"Network error. Please try again.\"\n      };\n    }\n  };\n\n  // Helper function to make authenticated requests with automatic token refresh\n  const fetchWithAuth = async (endpoint, options = {}) => {\n    if (!token) {\n      throw new Error(\"No authentication token\");\n    }\n    const response = await fetch(`${API_URL}${endpoint}`, {\n      ...options,\n      headers: {\n        ...options.headers,\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n\n    // If token expired, try to refresh\n    if (response.status === 401) {\n      const refreshed = await refreshAccessToken();\n      if (refreshed) {\n        // Retry the request with new token\n        const newToken = localStorage.getItem(\"access_token\");\n        return await fetch(`${API_URL}${endpoint}`, {\n          ...options,\n          headers: {\n            ...options.headers,\n            \"Authorization\": `Bearer ${newToken}`\n          }\n        });\n      } else {\n        // Refresh failed, logout\n        logout();\n        throw new Error(\"Session expired. Please login again.\");\n      }\n    }\n    return response;\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      loading,\n      login,\n      logout,\n      register,\n      updateProfile,\n      fetchWithAuth,\n      refreshAccessToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"s3+shCSR/t4KywrfJXNOwwFNgWM=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","API_URL","AuthProvider","children","_s","user","setUser","loading","setLoading","token","setToken","savedToken","localStorage","getItem","savedUser","JSON","parse","refreshAccessToken","refreshToken","response","fetch","method","headers","body","stringify","refresh_token","ok","logout","data","json","setItem","access_token","error","console","login","email","password","success","message","detail","register","userData","removeItem","updateProfile","updatedData","updatedUser","fetchWithAuth","endpoint","options","Error","status","refreshed","newToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["A:/Aryan Drive D/Projects/Single Sign-on Service/sso_app/frontend/src/components/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\nconst API_URL = \"http://127.0.0.1:8000/api\";\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(null);\r\n\r\n  // Load user from localStorage on mount\r\n  useEffect(() => {\r\n    const savedToken = localStorage.getItem(\"access_token\");\r\n    const savedUser = localStorage.getItem(\"user\");\r\n    \r\n    if (savedToken && savedUser) {\r\n      setToken(savedToken);\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Refresh access token using refresh token\r\n  const refreshAccessToken = async () => {\r\n    const refreshToken = localStorage.getItem(\"refresh_token\");\r\n    if (!refreshToken) return false;\r\n\r\n    try {\r\n      const response = await fetch(`${API_URL}/auth/refresh`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ refresh_token: refreshToken }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        // Refresh token expired, logout\r\n        logout();\r\n        return false;\r\n      }\r\n\r\n      const data = await response.json();\r\n      localStorage.setItem(\"access_token\", data.access_token);\r\n      setToken(data.access_token);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Token refresh error:\", error);\r\n      logout();\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/auth/login`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        return { success: false, message: error.detail || \"Login failed\" };\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Save BOTH access token and refresh token\r\n      localStorage.setItem(\"access_token\", data.access_token);\r\n      localStorage.setItem(\"refresh_token\", data.refresh_token);\r\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n      \r\n      setToken(data.access_token);\r\n      setUser(data.user);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      return { success: false, message: \"Network error. Please try again.\" };\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/auth/register`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        return { success: false, message: error.detail || \"Registration failed\" };\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Save BOTH access token and refresh token\r\n      localStorage.setItem(\"access_token\", data.access_token);\r\n      localStorage.setItem(\"refresh_token\", data.refresh_token);\r\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n      \r\n      setToken(data.access_token);\r\n      setUser(data.user);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(\"Register error:\", error);\r\n      return { success: false, message: \"Network error. Please try again.\" };\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = async () => {\r\n    try {\r\n      if (token) {\r\n        await fetch(`${API_URL}/auth/logout`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Authorization\": `Bearer ${token}`,\r\n          },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Logout error:\", error);\r\n    } finally {\r\n      // Clear ALL stored data including refresh token\r\n      localStorage.removeItem(\"access_token\");\r\n      localStorage.removeItem(\"refresh_token\");\r\n      localStorage.removeItem(\"user\");\r\n      setToken(null);\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  // Update profile function\r\n  const updateProfile = async (updatedData) => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/profile`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify(updatedData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const error = await response.json();\r\n        return { success: false, message: error.detail || \"Update failed\" };\r\n      }\r\n\r\n      // Update local user data\r\n      const updatedUser = { ...user, ...updatedData };\r\n      setUser(updatedUser);\r\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error(\"Update profile error:\", error);\r\n      return { success: false, message: \"Network error. Please try again.\" };\r\n    }\r\n  };\r\n\r\n  // Helper function to make authenticated requests with automatic token refresh\r\n  const fetchWithAuth = async (endpoint, options = {}) => {\r\n    if (!token) {\r\n      throw new Error(\"No authentication token\");\r\n    }\r\n\r\n    const response = await fetch(`${API_URL}${endpoint}`, {\r\n      ...options,\r\n      headers: {\r\n        ...options.headers,\r\n        \"Authorization\": `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    // If token expired, try to refresh\r\n    if (response.status === 401) {\r\n      const refreshed = await refreshAccessToken();\r\n      \r\n      if (refreshed) {\r\n        // Retry the request with new token\r\n        const newToken = localStorage.getItem(\"access_token\");\r\n        return await fetch(`${API_URL}${endpoint}`, {\r\n          ...options,\r\n          headers: {\r\n            ...options.headers,\r\n            \"Authorization\": `Bearer ${newToken}`,\r\n          },\r\n        });\r\n      } else {\r\n        // Refresh failed, logout\r\n        logout();\r\n        throw new Error(\"Session expired. Please login again.\");\r\n      }\r\n    }\r\n\r\n    return response;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        token,\r\n        loading,\r\n        login,\r\n        logout,\r\n        register,\r\n        updateProfile,\r\n        fetchWithAuth,\r\n        refreshAccessToken,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within AuthProvider\");\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}