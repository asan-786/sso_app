/**
 * SSOService - JavaScript SDK for Enterprise SSO Integration
 *
 * This class provides methods for third-party client applications (frontends)
 * to authenticate users against the centralized SSO portal.
 *
 * API_KEY is the Developer API Key generated by the student user in their dashboard.
 * This key is required to use the /api/sdk/* endpoints on the SSO server.
 */

class SSOService {
    constructor(apiKey) {
        if (!apiKey) {
            throw new Error("API Key is required for SSOService initialization.");
        }
        this.API_KEY = apiKey;
        this.API_URL = "http://127.0.0.1:8000/api";
        this.TOKEN_STORAGE_KEY = "sso_access_token";
    }

    /**
     * Attempts to log in a user using their SSO credentials.
     * On success, stores the JWT access token locally.
     * @param {string} email - User's email.
     * @param {string} password - User's password.
     * @returns {Promise<object>} The user object or an error message.
     */
    async loginWithSSO(email, password) {
        try {
            const response = await fetch(`${this.API_URL}/sdk/login`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-API-Key': this.API_KEY // Authentication header for the third-party app
                },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();

            if (!response.ok) {
                // Return detailed error from the SSO server
                return { success: false, message: data.detail || "Authentication failed" };
            }

            // Save the received access token
            localStorage.setItem(this.TOKEN_STORAGE_KEY, data.access_token);
            return { success: true, user: data.user, token: data.access_token };

        } catch (error) {
            console.error("SSO Login Error:", error);
            return { success: false, message: "Network error or SSO service unavailable." };
        }
    }

    /**
     * Retrieves the stored access token from the client's local storage.
     * @returns {string | null} The access token or null if not found.
     */
    getAccessToken() {
        return localStorage.getItem(this.TOKEN_STORAGE_KEY);
    }

    /**
     * Verifies the validity of a given access token with the SSO server.
     * This is useful for checking if a user's session is still active.
     * @param {string} token - The JWT access token to verify.
     * @returns {Promise<object>} An object containing validation status and user data.
     */
    async verifyToken(token) {
        try {
            const response = await fetch(`${this.API_URL}/sdk/verify?token=${token}`, {
                method: 'GET',
                headers: {
                    'X-API-Key': this.API_KEY // Authentication header
                }
            });

            const data = await response.json();

            if (!response.ok || !data.valid) {
                return { valid: false, message: data.detail || "Invalid or expired token." };
            }

            return { valid: true, user: data.user };

        } catch (error) {
            console.error("SSO Token Verification Error:", error);
            return { valid: false, message: "Network error during verification." };
        }
    }

    /**
     * Clears the local session token (does not notify SSO server for logout).
     */
    logout() {
        localStorage.removeItem(this.TOKEN_STORAGE_KEY);
        console.log("Local SSO session cleared.");
    }
}
