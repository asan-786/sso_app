import { ErrorCallback, AjaxExConfig, RequestCallback, ResponseCallback, AjaxConfig, AbortResult, AjaxData } from "./types";
declare class Interceptors<T> {
    chain: any[];
    constructor();
    use(callback: T, errorCallback: ErrorCallback): number;
    eject(index: number): void;
}
export declare class BaseAjax {
    static defaults: AjaxExConfig;
    interceptors: {
        request: Interceptors<RequestCallback>;
        response: Interceptors<ResponseCallback>;
    };
    caches: Map<any, any>;
    private IS_AJAX_STOP;
    /**
     * 停止ajax
     */
    stopAjax(): void;
    isAjaxStopped(): boolean;
    protected getUniqueKey(config: AjaxConfig): string;
    /**
     * 取消接口请求
     * @param controller 取消控制器
     */
    abort(controller?: AbortController): void;
    /**
     * 取消所有接口请求
     */
    abortAll(): void;
    /**
     * 提示错误，可以配置不提示
     */
    private showMessage;
    /**
     * 处理消息，具体实现可以覆盖此项
     */
    protected handleMessage(msg: string, status?: number): void;
    private handleGetUrl;
    private handleBaseUrl;
    private handlePostData;
    /**
     * 进行fetch请求
     * @param config 配置
     */
    private request;
    /**
     * 处理200-300外的错误状态码的请求
     * 一般可以在这里处理跳转逻辑
     */
    protected handleErrorResponse(response: Response): void;
    isAbortError(err: Error): boolean;
    private mergeAbortConfig;
    private mergeConfig;
    private mergeResponse;
    private clearCacheByKey;
    /**
     * 实现fetch的timeout 功能
     * @param fecthPromise fetch
     * @param controller 取消控制器
     * @param config
     **/
    private fetch_timeout;
    private core_ajax;
    /**
     * 缓存请求，同一时间同一请求只会向后台发送一次
     */
    private cache_ajax;
    private all_ajax;
    /**
     * ajax主方法，返回promise
     */
    ajax<T>(cfg: AjaxConfig): Promise<T>;
    /**
     * 调用ajax的同时，返回取消ajax请求的方法
     */
    ajaxAbortResult<T>(cfg: AjaxConfig): AbortResult<T>;
    get<T>(url: string, data?: AjaxData, options?: AjaxExConfig): Promise<T>;
    /**
     * 调用ajax的get请求的同时，返回取消ajax请求的方法
     */
    getAbortResult<T>(url: string, data?: AjaxData, options?: AjaxExConfig): AbortResult<T>;
    post<T>(url: string, data?: AjaxData, options?: AjaxExConfig): Promise<T>;
    /**
     * 调用ajax的post请求同时，返回取消ajax请求的方法
     */
    postAbortResult<T>(url: string, data?: AjaxData, options?: AjaxExConfig): AbortResult<T>;
}
export {};
